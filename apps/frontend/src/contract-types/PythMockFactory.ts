/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { PythMock } from "./PythMock";

const bytecode = decompressBytecode("H4sIAAAAAAAAA819C3xcxXX33dXq4aeunpZXfiz5sNk8ShawjUlIWVW7kYRQdRXbn+XiZeUPi9gBg1hbjimkLKlJ3VcqSCFOWlqlIXxu0qYrW7bkF2woSZw0adV8/VrSlsQkEOxgyQrFiR2SuP9z5ty7s3fvXdLnr/79/Jt7Z+ee/8yZmTNnzjkzCs/GjF2GETT43z2R1OV8wLx8mfKM8DnLeMRo2ZNqn11pthn5cGLAyHQGLTPZmA2fNY3IxeuM/jdOB603Tod2GVXvCXdMGVb3eDY9bY5kEg05s2M8nrnFqIkmr7S/7fT59mr59nl8+weZRPOk/q397vHd28Pd+K53cpR+C78cMcIvxtxlriXaoGVGpxtBa9FaoW1GO8add6v3hJWxkNfTZITPltBQbesd34f6PZKejjxqdeTMTCfKJ1dlM50NkybazTS7CAPvRLN7fCg9bXw0EzfmIP09q/1IC5dpQ5s664u+sTpOqOdkKB8+i3a8XNLWd4Tbp4zd8cpH0R9XUX8UcCYs0P8+cBYhfdVqn9hv41jdJ0Y0jNE3wWgQjBXAiLow8qB9ERgm0kvAmNIwchpGvjxG5Y8VRug4MN7qwjgN2j8BRgvSnwJjVsNQeArj9JtgvKgwKrqA8bZijEkjPR0wgFGJNGC1T5oahsJjjJNqzPhjnFIYwW8D4+2McQswesdB50gU9f8iMBqQfgn93p9JMEYcdJ1xY3WfjCk8wlDj14XxF4KRAcY7ittxZAq0/xEY85H+EzAUT7gdJ9X4Vu2w3qQdjwtGNTB+wYUxC9rfAsZcpN9GfyieKIwBDWPoTTA+pDACnwXG1a4+p/H0HWDUI/0uMCIahjY/Tqpx7I+xVTAMYLzThRED7e8BYznSV4Ch+KMw1JxQGGoc+2N0KwyjAxgxF8YAaJ8DRh3SaWAonigMNScUxpuN3WsFIwha96+JG67fw330u9VxbCB8FjK65PvaGvX7oUk1zkLZTLwpYraPQ/5SfRoL74n6AywLpVypfA1dJlqZBMpzG592eEV1Ly5bfZpk5Io208ish+zfeDhutR+dDJ+1UEd3GxZ8het466F9mBct0U0hyHbLjT0eTgM7btS0tlXmV4IP4fgQ2jW+H/z9WHp66PetdshvaVP6nPHJTKJlQNrTwu3ZahjNbY/lwcvrM3H8hjaDbzWqTu62LqxXa9AhamOL6qvDJHNAa2ve6jFbsD60RHsqDavNpHnbwnI83jwkvO1UvJX3BFLiWRLfdeIZst7qiuC7+gGSETatTLx+D5en97Ym6pMRbgO9J1fwWkT8C7/oru/iwTB4soL4Usq7QdVvih9Wl2mmeg8tzFhmxFx32MgMgGd9zfgu7u6XL4XXTRkNPauN3bcYAegAYbS7JtVnBhr64kZ4wDR2W0ZFqi9GNIKtWx428JuR2h4zmnZ8JBu+N27svou/m5u5C/2244ix8i4QGRrC76P2bxX82/an8tF735tNJ/NGuieLtfVp4oHP+lvdQn2T6olQmZrWnkQeekQ+nTSMVFvEwDyMp7sMwxwciQ8bxv2ZOMaf6uu13nNk4Qo1Rw5etMcK+q1f+hH9gH608A5ehW8x0Edmp+pT+i2BsVoyni8Svea2VTxv7X5J3Tp7jblpIJ/aOHutucHCWDGzOh3Ub5+qH/q4pH8X3i7zmNaLiKqjyWOY31FHfD/k075flG9jhfa11BS1z35PmPv1OWO1Hzug1iJ3GxfeKzQ7UTauaDbEhGZc0ZT3RAOPfa2czImWuORLe1S+1WZE8BvLGPs3q/0wyQa0c2scc/uwlTSi6rf12QIdfEM61HozT/Im0485uKESdOtU2/rp+yaUr4tyeXpProCcUzKplOeLdpo9MfcYinjzeMHvyxia0sZQvJjH8p6o7yySSyVytmW7yHTLB+tjgnVGk+mmS6ar90R9S3mZXvFbItNNkemOflgq06vudGS6w4/jUe86VnxH6jhU6N9me93h8eq8J+pVfzh9fVz0H/eYW/QNoTlSoNl4upimerc6noEebtM7anrTm7de6Kl1Q/HRcPFRvSdMtX/x5+Na4aMhfFTrvTcfF5fy8egebz7O+5bUEeuGEZU6XpQ6RqmOqfaDzwD3oqwvNZnOum2yl4iodes41jiiTfuhkjG+ROhr87CR66TxVOr4zIDGU8hlL57OZR0B9Kis8LRxqpin6h30Rv35GXxJ8RNlFT8d/bKUn5Vf9ODnGZ9xeaOq39ipQnubni9ur7wn6pin2riUfWXJuOS9GGjSfLR5qGR7gYf8jjZr9CZnfXj4eeEh+tLh4aiLh/xudTxN49yPhywnwMNR4aHS/b15uMvNw9J1LbiOynjk96h991HwR61frjHcF+7F7+ty8cx6yLy+1dhfH53yKTvObe/N9XPZnkrojePYB5p/iH32E5D7tP5BbiaysgbgGXvuRJO9bvEagzlxKNVxcDzTiXyla2Ffh2faj/XEohmrbh/rPlyfFfiublStHaTrUf2Od9rjJ/widJ0XMHe+6a5r8x+pfsqRjBOZ3+jSG/AOHIydi6V8m8N6Ar7fV/jetNdQ0gnQpyUy68XwRnzT/nTOxsD8Pu2/hs35M8GguWavS/Z45+/D/aQXD8ahq1zj/JZozutrFPLzMt5o3ohucMJHrs55QeaDtudotPVie/yqtb7jJK2XPuM38F0Zv0p37n7a2ceWjt/Qc/b4TbXFg6rvBty8e0L2Uout9pOzag/upb+hLoxrDLQmm7JmWwi62ZFt6XPm163u3CTqMEB7dOj9Nfys7DenePzEjW2oH9nLqqCzRKCrPOn8lqDfQKt9ci0/Y/+fah+rboC+ijoF1sDGRr9B/6mBHcrWEQYU//DO/bLI3qOp/G14v/OI06eQLzQuIF+ehD3hGbVfobq2H4XeYtvESvrra9JftMbY/T2rjxGrbTSC30nXs9dy/h32E9qfC8aYsw+CreuAnZ+6PfdYKp17PNWe+zh9b3aFsk09K/Kyp6hGuWBrz658ZjN+S63Or9xsGNGle7G/wP6u98jazFZg9kB3attLfQJ5ugo8nIBdMQt7xNAPIBdeQ922FcblxAFn/iUW1RTps22jcTsP/Dmj1sgQ6eJKR+T605p5FHsF2o97zikeH8DU5tQiW7cRXU/eE+gXDR/6P+mTsNPY69SkyMGSsf+owhiPaOuU2hsW1in1nqizMex1iudS6bxs+rDQ1Nf6qGud4neMIwcX85xtrR7zPCT09LVejdPCPOd3zHOi5zPPjbMyz3nMY56LHcxrnld81WOt99GT5/ye7FFIZtm6k+XSnT6LtcPSdKfOYt3pmOgRXrpT49eF/qy2h7F1M+Gnegc/VZ7iZ8ybnzU54afYBJmfLS5+8jtsnrTm+PHzMeEn6/7gp7KhefNzdyk/J3Pe/DSmZS3Rx6S9XtljUvZ8dcpmXxiTsE95tbnRXiscfR31OOXiIb9j7Tmt8VDkWQkP06I7kRwUHjacKeahegcPnXHrwcOE4iHKKh4qu7A3D1fYPHwM9ozHa5SvJNw+aoQ7TmM9wvsF/L9kGvvx28dR5uaL6CTDWF5SFnaLVFcEtg3YGWDbMGF7SbfBHnAB46/w/XL5/ib7+0cMI6ZojBjh7qwR7j1N+pYJfaYm2lcZh/5UgWf4PJJx5Ef4ed3heKoPdpJkIp7m/kdeN/Q+YD1K9C7FbLybBK9awzPtOjMPp2nNzDltxfemVt9qj/pahfqCBvtjYAN9Nefuh5jojtQW2KmaIIvcdirjKttO1dADXlkG2auWQIeMKRtSpYcNyXibppP60b2CbYA2v8BHjzJsX31r3yorfCFO7bbClyL/Hr4FyvDtP8r3Wu37AZ3v4BHrP6V6uLGQxz/JQfSL1Q4e0DPZWCkle/UFk/AGtPbWusc18OI6noxr0FxN2BF+7j3s5NvjHWMxAn8c2sQYcQ3DHvsPFjACnS6MEPoshz6LUJ+h7pjf0OHZruaWFwbb19GmmLTzIj+jndBnonabobuEUr25Sqpjax/stJhXrX0bjJUYa2ELesrGsegNfZUW9Djofbl+6H3zUAfSv6LRvlAeOCbyY9Ahq/jbnvV5E3ZLsp2mNsQCqU2xYKonVpGejlenp62a9PQAfISxuToN8ARrWEJ4gjYXePKg8OSyxpNZhye3Qh5s5PFS09oF+Yc2mV3QWW8xlktauVylocUp8leiXHIX6doRsqtyOZVWLkeKfstxv7G9mvpyFfTWMaon8wrtxL5W6U4uXl/HsrlbxpLSGX32EEZU9oFk+2Ys1i/puW0FaIypOnTROBob+nRP6FP43eL1oR37ve6xIeSPIH+U68ZrCXxs7eCn/dydI5uC1COn1nzorpCVjdArm8CHGPsiLgwQv2fDlyyb35c95lXROEf/h/C/Ev+r4J+oduYPxliZsW3PH01OBqATCN11qh/Rtk7Q6pR6Qz/x4nWAfSrcVsgIlFNrMenySdhX6bkDfOoYIxsD75lR5pRPXzS7133wVNngiB7xTp7R3karC/ty0Z/Aw06MXfCQZCPaUuChLRu1eWzAh6rN497Z62B/zZM8t+cZ5kc9MBoYZ11uxNqIOvWj/rDzqj1wiXx+C+o3grIHlDygvX3uAN4H1N7fS6YH2mg9Ae09oN1i03b5INjO9Us9CWcOuPr1lMf89JWL9tig9c9D7zLJJu7IS1nPPMpVhV/nNcBDXlbrsuE0Y98KbJIL2FOtTOC3BORYd45iBWRPRHW6kuad6muaV3jmuSdlIBfXpLpz10M2rk2ty91APph0MhJIJ2PBdDJeAd7D5wfdAhjKllIytka0scW6GDBon8m6GvJ97HjGOfIHkkxV/pNd2KOP7fG3qVd/LHw7dIS2LO3/d1iDA2aqbSCIvTe9b021jRjm9iqsoyOki/arumz1ohMgnaA52ZzdneD9640or9Ziz/LGDuVHxP6U9cetXvbgc2Q/a+p5MhuG/0z2xVUrt6kx3wQ/l+QFon3ME8xTWs/QhyV7EuNGhceyTXzMLJtRP+zL8Yy6OPsB0Hre2+9s3Cx0HDs220s2UczCmOxPPNt7DX1ntjVSn5JcQH/sInmsbAOe+rMxSN9E25qN9OAo2U4q0a+ddr86PmEe2xi7jgyptuWwPq8iXnowZHCQdWDScad5zuq6bkTTdW394t+ix+t6rYbP+pVZRgddRDroSvgUuZ83xIzd67mf5yhdHbLJpQ8PG0HMXfAK+gDmF+ZaDHojyxu04b9Z7yypm3EL1a0MPV3Wa/uVUj6FXymh3U+8Yn2pJxYQuW96yWaUfQ/Vw+YPZFJQeIQ9TYlMdtbwovq0yRomem7JGn35MuTp8suqLXOENyNYn+qawh0Yd6pNJK+j1CYaO8rOF/pF0iVF7gQRN3IlxXRY7QdZzrnskEPcDsRZ4ZuLRAMxSmF5DuB5rjxjbAcqtTLLtTKLtTLzCmUMxCk5ZVq1MvO1Mi9rZa7QyizRylwolDHOa2WWaWV+opV5pVDGmNXK/FQr8yOtzA+0dlVo9UFcj1PmrFZmgVYG/HXqU6WVadDKLNToXNbKNGtlajU6Aa3MUq3MIq2MqbXrjNauF7UydVqZ1zQ6Ea0+39HK/Eyj832tzHe1+iBmyynzL1qZFzQ6L2lY9Vp9QlqZb2l0vqeVadTKvKqVOaeVadHKvK6VOa3VZ1or80OtzBtamRmtXTVamUtamR9rZebw81cM1T9fpLmF9Ouwp1D6Bck/KflHJf+w5I9J/p9L/p9K/mck/1OS/4Tkf0LyIUA4hVLF6e9K/m9K/sOS/5Dkf0jy75N8CHRO75X8HZK/XfIHJX+L5Kckf5Pkb5D8PsnHPprTLsn/W+R3jDWlkibkD3SLePAiUsih4MtYA6H/NFLeFJ4r5Pk4niGf+PkpiouU50fwXCXPD+AZfgt+fj/FZMnz+yi2VZ7fQ3GC8hzF8zx5rqcYRfUc+DGeF8gzxfwtlOev4rlWng/SWi3Pn6R4Onn+MMUIyvMHKLZSnqkOjfL8Ljw3yfNb8Nwsz3MpNlY9G69RfKk8U/zkYnl+Fs9hef4snlvl+VE8L5HnX8XzUnn+P3heJs83U2yhPF9LerQ8h/F8hTwXZH/HkSj8QGGKEUVKsZVfQop4VOPLWBdov3qFraOV6s9B9pey3TCJPse8gP7QCJqQQWMU3/gs0sVI/xLpPKTPgSb55WA/9aX5x940D9M69G3QeAa0WpFC/x+jeNMvgCb5QpaXoclxJh40T4Hmy6BxFLSuQHoM6RKkx0GTbNzLytAc9qGZA80LoHEE6XmkE6C5DOkkaJJuv7QMTdjHPGnuB62fgMYhpK8gHUdK8bCHQZP21kvK0OQ4UQ+a8D/kfgoaVN8fIR1DCn+WcRA0ybfdWobmGh+a29BW2JGMP0dK8vXzoHkW6V+AJunt4TI0r/ChaYHWAtBAvO4Yyd3PISW7xp9hr0Yxc4vL0JzvQ3MtaFA89P9FuhDpAdTzMtI/BU2y87f40wz8yIcm1s6xZtB4Emkt0s8gpTXjKdAkH9CiMjQ5XsmDJtaesaWg8SmkFE//J0hpP/Fp0CQfQ3MZmuwfKqU5TnrPGdD4I6QvIv1j0KQ4YbJV7QfNpjI0J31o0l78NdDAOB2LIP0E3r+D9JOgSb7RxjI0P+1Dk/rkZ6DxGNLvIyUf7neRflxsbQ1laH7Uh+YI+bxBA+cWcv9CsbtIX0CK+N2xtaBZX4bmfT40cSYl9xKdqQBtihsnjBDSR0CT7Ap1ZWhynLgHzQHQ/BZo/A7S7yH9XdCEXdD4KGhyXE4Zmr0+NDtB61XQ+E2k55D+FmjS2YbfJpspaNaWofkuH5ox0HodND6ClM5L/AbSaaT7QPN50FxYhibHvXrQJB3uh6Dx60jfQLoX6QzSh0GTYuUWlKGJvZAnTeglY7BrGyTzLiF9COmPkX4YNMlfP9+fpvGGB816+F2hW4/RWZoPpc9Hfi193nyQbH2gNa8MrTMetOpwXmIqfT72j+nzxj+lZ2b/GbQpJmeufwyA8fc+dCbTM6f/IT0z9Xx6Jv9N0KE1bE4ZOs/50BlNz+T+Lj0z+v/TMyN/Dzq0biGOz5fOQR86+9Iz2b9Nzwx9Iz0z8P9Ah9aq6jJ0Rn3oDKVnrL9Oz8T/Jj0TmwIdWp+qytDxmv9Epz89E/mr9Iz5tfSM8XWJZ64sQ+cBbzqHMdZnT6SnT59MT089DX8v9VeoDJ0PeNOhM2b5P0hP5xBfNvqE+KErytDp96ZzCOdvRn4VMSn3w3fwAGxfZItEHJIvnfd60IGP6NAkfD8fhA9oD2zd94HOQPiMssl70FjtQ2MUvqNdiIsZTp+P7waNzvAZsqF60rjSTQMxN/AXR07BXvYVzK2vgp5z7sD1Lceks11wmuKaYMOh5/ZxxDXNrkh15IKwDVesCoTep2KbchGObSryH8J2wraV5Zc/DptKqR+L7MMl9rw9ynbfpGyD0xQ7z77elmgHfInpXFXq1lw18GvYh97XBNtaMiu2tWp8G2zdMEjx3zXmpg3ZlYh/iy7dFQ9vHoIvfFecbNhkf0Q/QrYMQB+PzwN9dd4jSX4o2Fad8xkc4wT/BtsRRzQ7opePSPyUZEMLGSs7kd9JMU45rAGRCspDyn4jtptOs49K2U272e/KsVViX4P/z7GvefiNjG0u+xqdZ5QzJkyb2kE2rhb2b8K3ib4xyR+OsVNj9cRrOHaA4y/Rdj67lCic5VP2tG0eNke97yBLim18bhsobHUdjl2P/KA9saB1a24bxYJFN1WSfwtnLOPQjSys67EG0EBc1oCM5RJ7apjHMu2B+2Qsb8zhLGSM+xBjeT612esMEurxy+IH5jgEtg8XfDmjWjulXwO6P2UqfDva2Y52pjFGb4WtOIkzLN3sP5bYuBxiNL3j74B9XOYR+oXm0dgQP9M8assGIJOGMA5OFc4hcX9gLFKcHeaC5Kc25mrhgzEx7utIFprw9SLOzvYdSJwd+tDCb32r2acWXbo+Hl7PY3AE/KG9ecjEuRUzuZ78vyHqa9QdZ6ws6Opx6D+RJp5rTqwdfMFOHOqYE8eKegfpHTwgOna9OQbWK5YKPPiJ+IHI9yO0Jb6O4rTashUUbwd6/QV65Dv2o6f0EJKfGj3a96q60jPxOEVzd4j8ClPhSwPSxwEvv0LRfHLbaoeNmtcknkTihot9ivhdxRNx7APLEOjosZDVA3koMRDs5/eeW+KTqC2eW3eiPu9HfW6n+oy68OY0y3m5iH5eLkznryDvwskho7nrcH431t40bEzpQTOQHhyAnXyE/C/tGFfwi4K+6wwq2rGbfFXKX8njT/nNIZ/oGeOIzjhjP2dCly2Zn9cSjxp6ttqxn00NPZgTFvu8gjw++1bFm3oQk7uBY3jU2THQb0VcCPtJMFab8I38VsG/ISYhugH9CHt/uM2isUxnL2GXMKGnuuVN1TDVQcVxJLMUbyLxPfANUxw4+VcTHKdp7shRrGanmv9Z6Ytae2x4+YfYl1LqH7pJ77fsm/TbXum3Fqff+tFvQ0ip74bRb21fpDOM6LcB9NsU+i1n99sGD3r7ZR5A7lF/luoAKPOIax0fsNdxfOd5Zg58zLCspTN3ZGtkvYH6fgB9P1XS9+Bjt+r7ca3v4Ssq6vvr0fcd6PsBve9bivse8duFvsdvf4e+h091GH2/ifse8p7W7CnsAUr6/nXp+5bWvvci/ob7Hnt5EzaNCNlMQrw2wqdPfW/em6f+/xX0f7bQ/zeV63/0g6d/0NPH1NwTilNbGpCGL0C/Kh9H1eKWPx4+sk+41z/4v8gPpvvAWsrHUqGtxWs2xo2bj8FVHms2+B4H3y2ss7H5aq1XMfjudRrff9Bjnd6G72BjipMtqJbiVbzX6aA6Z+W9TqOf/P17bt+sHXNR8M3ZMfjQG3l9dWSx7lv10rW0WEalo5I9XvnoS9a5D1NsCc7NthRiD0tjUIaNarbB8lhFfKY6g4A145wZophNtvuzDyQOO7HFMUYcr4GzB6SLYn6QHqliUgp+bsQmumI6A+THtNtRdzp8K9qxkWKNqO8PncY5E6Vj49wl2S+4T1/y2kfU8B69IENwrkNkSKlfs+afpWygNRGKm8lV8dtY536a7kWwsfoVFu3hS7DYB164c4PWdpxFl5gRD7x8Aa9Rx1N6lsLbRt+RT8R7n1Tzl6VxKnJ+zRuTbWqESfvA1uSVOq465864h2HnZNwKH9zPCK5zTgZnFYrOgnlg79WwK1zYOQ0bcSSMHfLB/ogWmy1txnkPf9w7NNyQC/dUAfcIn3Uk35IPLnQt50yi4B4th4t9lYNb6cI9XcCd4LOq5Mfywb1ZcMkWJ7jHyuG+TcOtcuFe1HBtPlf74Mr5Qdw1UMB17jLwwGWbuuBWF+M+Q3twGxexPYxb44PLMb7AdWLlgavGmSdu9YyGixjRItyohsuxDOQL9MatRmwq4zrnboFLNn8/3CkNd44LV5NPE7y/IL+jD66cHz7kzCXgqr72xmWbmuDOdeHqssoez/N8cNWZRrVvEtzjZeZvNZ8lF9x5LlxdZvF9AeRP9cHlu1yAq82j40pmeuPu1nDnu3A1mTW+X3AX+ODuEVzyEdi4ZeZRNdvUBHeBC1eTV+O4i4BxF/rg/oq257Nxyafgh8s2dcFd6MLV5NU4YhgZt9YHV84U8zlQG9eJYfTA5TPXglvrwtXk1bgtN0wf3GWCq8nn4yp20RO36mcarunC1eTVuC036nxwoccyLtnabVzyMfnh8notuHU6LtYyuafAwbZlR703dhXf5STnWW1ssrX6YX9Bw653YauzbwVsW340+GA/K9iavDxONg8/7D/RsBtc2HIXhLMW8xl9il3wwWZ9AtiazDxOvkI/7F/XsBtd2OqMcgHbXhebfLBZnwC2ktEKm3w2ftjsUxPsJhe23P3hYPP+kmIzfLD57hpga2vycXWu2Bs7qWE3u7D3ubBZn6VYEB9sttEX4nsZm/zIftgrNexFLmx1p0IBm/Vb2m/6YF8l2JqOe7zMGllVrWFjz1CErc7TFbBtXXexD7bcGcW+Uxu7zDpZyT41wV7swlb3cxSw7bUy7I1dyWdBga2tlSfKrJWV6pyDwg67sNVZzAK2vV62+mB/VbC19fJEmfWy8rMadmsxdp1Lrh2218wlPtifE2xtzTxRZs2s/G0Ne4kL2yXXDtvr5lIf7N8RbG3dPKH47419l4a91IXtlmv22rnMB3uHYGtr5wnFf2/sHg17mQvbLdfsdWy5Dzbb/IGtrWO499Ef+2oNe3kxNvaW8RDi3lcZm2FP0PeamxF7h/IB+DSCrV27smbXquxmnPHEewD3ZlW0ph7O07n3zakhukcrgPPuodYtjxvmljXG5i1ZA++BzDbsawafipuDa+KbB0cMvAdwb1ZV6/YjWXP7muzm7aMG3gOZIewHdnwpb+5Yk9+8I2dYOydrMnDKt+6qjpvDX47fBgOEqmsj6vqccZs69xlAfYOtiEtTeaibyqso5KFuKi9UyEPdVF5lIQ91U3lVhTzUTeVVF/JwzuVs3sXf0CPhD7Ltk8rinjcqW+CnrvtrPJ3rwdN5Hjyd78HTBR48XejB01oXT83MHvBwT3XWvO/L2dvu+x/N0xvDOx2emg5PEYcqeXUefHb0JI3PDR58bvTgc5MHn5s9+LxI57N1z2RLgacT4Omsod4XybvUdw/x9CXUd1zns/CU8hw+C08pz+Gz8JTyHD4LTynP4bPwlPJgDzvrPpNc8YrY6Kks7PTCP7uOCayBpXwOO3k7nLxWJ2+7k7fEyYNfRvKWOnlbnLxlTt5DTt5yvS9xLwzJ8EBrJ+6dgC/wti4+u4F33EXE7+Ax9S3Z3tGvKi9n51UU8jDWVF6okAdeqbzKQh54qvKqnLybUTeVV10oB1lcen8W33eRnv7G2vT0szekpzPvSk8H3w2ZLvfOsC9Q7gfAXT1F9wPUuXVKew+BM2decr+C7QmgqenScheAp9yvyLHfII47g4px7P3CFT44RwRHszfIvQ3eOI+rM22TcqaNbWX2vuAtPhh8pw0wNN38RJk9ScWH6BwcMOR8FWPYNsj/5YMh+v+YpoOfKLP3qNgafj9jkB/JxrD3GFf6YNwptjdN1z5RZo9R0R2+kzH2aBj2XmKFD8b7BEPTqU+U2UtUXBu+hzFwf7WDYe8ZVvpg3CAYmu58osyeoWIxyWdgHNAw7L3BVT4Y8GMwhq4jU6yfH4bs149TGU0e4Jx9kTyAnCyRB86c1uSBM/c1eeDICE0eOLKkIA+68j+nPAh+lOdCL+Z++ySdPbR5Y+9dot68CX5TeKPr0eqeRE/eBI96+yImn9cw7X3DW30wT7jvvAMmxUX7Yf6htz9iku6ksjHt/cLbfDDZPyT3KwrmSXVfnDfmg/7+iKO4b8rBtfcKb/fBfUhwNZvTSbo3yg93i58v4ufSmele2a69Bb1D6RgVjo6Bu2KRV4M8E3pFy7LtVdllbc3xpW1PGsu2rzSWtlVll27n+690mWrvSd7h00b2J8g9k3Yby+yHglGO/Wg/qstU23b3Cz4Y7xQMzY6Fe7r9MWqV3D6qy1R7f3O1D4ac2y/chQOMMvubwA+V3D6qy1R7LX2nN0bgp4KhraW4C9wf4wUlU4/qMtVeR2M+GHwXpNytamOUWUcDzymZelSTqRP2OnqND8ZfCYa2juK+cX+Mz9FeBRiabJqw19FrfTDYnwD/g7bG4R5zf4xHw/czhiaLJuw17jofDI4BkLhaG6OMn1LF1PPfGyi7NjjrgLY2OOuAtjY4Ml9bGxyZr60NfDeFa21Q+umbrw2BaplvmrycsNflVT58WSd80dZl3O/uz5fr1Hw7psnGCXtdXu2Dwf4EuWfZxijjxwuE1Xw7psmmCXt9W+ODwWd0JI7bxihjFwwE1Hw7psmmCdsGd70Phn1nvLaG4r5EXwzE1PN8O6bJpgl7zVzrE3d8XjC0NRN3fvtj/I2ab8c02TRhr5E3lIvRlxh8G6OMPc84oubbMU02Tdjr4bt8ME4KhrYe4r41f4wnwg8yhi6b7PXo3T4YTwqGth7hjjx/DNHXT1KMvjan1RwuzGmZv/00p7cWz99+mtN2nszffprTdp7M336a03aezN9+mtN2nuwx+2lO23lecxr+HtYTsLdTfyulhu/n7mrCPY/Gw4jN/wjisX8DMUL7wCfc93IlYlosxLQgZuVS3OCYFsSyqNicQkwLx+V8kO84Ef0u5OgWig8hpVcgDguxNhwfa/aE8ptxjxjeA4jPqaB7nkzc+bQZd97jXfEB8ePmhsr45g0W3StO9pHK1k3DiBuszG7ehL9to+wjVco+UqnbR6qV7lIFnadYd4FNJAJbUxQ2jljmAWPtsuSi/LKuq7JL72vMLktebyzteim+7L735pcmr8ou6/rfkn9HXOXvNih/qcT/hC9NSZyPE1Nf9i4HjxioWtLJfs673ErunvOPf5rzrMQ/NZS7V23YML9N40HinkzEPQXZptFn1t6G+CeO+yqNdXqT++v0mO0gfM5andOo8ybcu7chEkj1RYKpLZEKxBrT336Qe5bG5LysOx7N5Dsm2Rah7llS952X3rNEck7uWRrzvDt72Kj/pdJ7lvjeb7lnif0Sctd/Tt0b6hGLNWw0BDS/f0wwaQ8UU3QOrpXfmBbOYc1HzPgCem/FfECbcU/YqmzhfMLBtTd0raI7ZBDzsQpzCHfA4A4wxFnirKWFM5FxnF/ILuY45iRiKjsOrn13MjSi7msBny8NueOqtXjDIGLn0AdyZwbufFpFdz6l1s2uNvviecQFDrEc2LCa7paqt3qsKL/3JBFrDLu9hf7p2YA4zrHntfveEGtP51Uw/kpi7et5TeB+5fve5C4turesl+4qophFd7xiwyeZn72ITZf7PPh8Lj23ob10BtZ+7sW+36K/KxNPoE5yNz7dO+ce33W1RTGQG3AevM2oKMRrWojdREwYxx+CR6Vxjc58DrcjxhJzOYz+svssDTtoGnMZ/90xqR53sVAfFN27tUb64Pr/mj5ouP7f0QccX/if3Ad8v8p/oA8ChT4A/1+ne2IMu0zAQ+YMhW9XsoZi8PlsKusAe0tiJIeNeYuobs1tW9XfEMFcgpzrw7mqtfR3hlIdszeYSRMx9/Z5iL3EO/kbQl4xt3M/Vxy3j7O2dtw+7kNT35V889f0Df2dFcjEAO4lRZzuGGK8Y1eDt+9EzHQMMf9y97j7nMDcx9Sd8HwHTjyKcyhWN+xu9Ex39nUftJz7zPgdZ8O6IhG5l43HEMYa7j2LR/m9rYnOxVAMEv6uDp33gk3Vlje9sEvyvWj093FUrHpp+wO/Jncvb0ZfDnnIJC2em/WFG9W9P05/ciz34I4t6aHM9tthmud/znv67nvS99y1dTCT3rVty91a/vDdO7fcMTg8tHXLrkHJumNwcOvO9PY70ncP3j64c+eWzH3G7i13bd+a3rV9B8oMZrbfgz9VxP+GtmR26p+lFaGddh28sPk7DZveBR8kFN3S+qj8V9d/fvi1Cz94ZPDQnJ59j177mb27fvmhCzf87O77m2M3HZh/ZI9Uy/ff1/ifETz/2DXTTw2/Ak2P/t0NztG/HfL9jndIaqr0ruckxY1nnC5R6Z2nJKU/P4h/H8hKeqNK7xiVdL9Ke0dUWvmApPJdheBXzKo0iBvGOV3/r6qzMLzwcAAA");

export class PythMockFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, PythMock.abi, accountOrProvider);
  }

  override deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: PythMock.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<PythMock>> {
    const factory = new PythMockFactory(wallet);
    return factory.deploy(options);
  }
}
